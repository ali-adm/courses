Sololearn CSS.
===

Наш курс CSS научит вас, как управлять стилем и версткой веб-сайтов. Вы выполните ряд упражнений и попрактикуетесь при заполнении реальных шаблонов CSS — так вы получите реальный опыт программирования, который укрепит вашу уверенность и поможет вам в реализации ваших собственных проектов!

Начало работы с CSS
---

- CSS используется для стилизации элементов на веб-странице. CSS - это язык стилизации, который работает вместе с HTML, чтобы придать странице ее вид и макет.
- CSS основан на HTML. Атрибут **style** позволяет вам использовать свойства CSS для настройки визуального представления элементов HTML.

Изменение цвета текста параграфа с помощью атрибута style:
```<p style="color: green">Text</p>```

Свойство color property используется для управления цветом текста. Код синего заголовка:
```<h1 style="color: blue">Main Menu</h1>```
.capitalize { 
  text-transform: capitalize; 
}
.uppercase { 
  text-transform: uppercase; 
}
.lowercase { 
  text-transform: lowercase; 
}
CSS **свойства** контролируют стиль HTML элементов. Примеры CSS свойств - это цвет, граница, размер шрифта и отступ. Увеличение текста в параграфе:
```<p style="font-size: large">Text</p>```

Свойства CSS требуют значений. 
Значения - это возможные настройки для свойства. 
CSS свойства и значения разделяются с помощью двоеточия ":", 
CSS код для HTML элемента должен быть заключен в двойные или одинарные кавычки, следуя за атрибутом style. 
Чтобы применить несколько свойств к элементу, разделяйте CSS свойства с помощью точки с запятой ";".

CSS означает **Каскадные Таблицы Стилей** и является одной из трех основных веб-технологий. Каскадность относится к набору правил, которые будут изложены ниже.

Структура: HTML
Стиль: CSS
Интерактивность: Java Screept

Код для центрированного заголовка с фоном green:
```<h1 style="text-align: center; background-color: green">Items</h1>```

Техники стилизации
---

- **Inline CSS** используется для стилизации отдельных элементов HTML
- **Internal CSS** сгруппировывает все стили для страницы внутри тега **<style>**
- **Selectors** используются для выбора элементов HTML

Добавление CSS кода к каждому HTML элементу занимает время и делает вашу HTML структуру неорганизованной. Существует альтернативный способ стилизации ваших страниц, который делает ваш CSS код более эффективным.

Можно добавить CSS код внутри HTML элементов, это называется **inline CSS** - встроенный CSS:
```<p style="color: gray">Text</p>```

Встроенный CSS легко добавить в ваш код, но он имеет некоторые недостатки. Например, для применения одного и того же стиля к более чем одному HTML элементу - необходимо повторить код CSS.

Альтернативной техникой стилизации является **internal CSS** - внутренний CSS. Внутренний CSS используется для стилизации всей страницы. Тег-контейнер <style> добавляется в документ HTML, чтобы сгруппировать весь CSS код для страницы.
```
<style>
  p {
    color: orchid;
  }
</style>
<body>
  <p>Explore the city.</p>
  <p>Discover hidden gems.</p>
  <p>Take a free tour.</p>
</body>
```

**<style>** - контейнерный тег это значит, что он требует как открывающего, так и закрывающего тега.

Способ добавления CSS кода зависит от техники стилизации, которая используется. В индивидуальные HTML элементы добавляется встроенный CSS код.

Стиль, определенный в приведенном внутреннем CSS-коде, будет применен ко всем заголовкам третьего уровня на странице:
```
<style>
  h3 {
    color: red;
    font-size: small;
  }
</style>
```

В данном случае h3 - выступает в роли **Селектора.** Селектор в коде CSS соответствует HTML-тегам, которые нужно стилизовать. Селекторы используются с внутренним CSS. Например чтобы стилизовать кнопки на странице, нужно использовать селектор button:
```
button {
  color: green;
  }
```

Чтобы применить один и тот же стиль к различным элементам, нужно разделить несколько селекторов запятой. Это упрощает код CSS.
```
<style>
  h1, p {
    color: black;
    background-color: yellow;
  }
</style>
```

Лучшей практикой считается включать весь внутренний CSS-код в <head> страницы.
```
<head>
  <style>
    h1 {
      color: orchid;
      background-color: lime;
    }
    p{
      color: orchid;
    }
    button {
      font-size: large;
      color: lightyellow;
      background-color: orchid;
    }
  </style>
</head>

<body>
  <h1>Explore the city.</h1>
  <p>Discover hidden gems.</p>
  <button>Take a free tour</button>
</body>
```

Анатомия CSS
---

- Код CSS состоит из **правил стилизации**
- Правило состоит из селектора и набора деклараций
- Декларация состоит из пары **свойство:значение**

CSS контролирует все аспекты дизайна веб-страницы. Это включает в себя шрифты, размеры, цвета, позицию, расстояние, макет, анимации и многое другое.

CSS код создает **правила стилизации.** Простейшее правило стилизации состоит из селектора, плюс **объявление** в **фигурных скобках {}.**
```
button {
  font-size: large;
  color: blue;
  }
```

Приведенный выше код, будет применять стили для всех кнопок на странице. Можно добавить столько объявлений, сколько нужно, аждое объявление должно заканчиваться на точку с запятой. Объявление состоит из двух частей: **property (свойства)** и **value (значения).** Свойство и значение внутри объявления всегда идут парами. Декларация состоит из пары свойство:значение. Пара **свойство:значение** в декларации отделяется двоеточием ":". 

CSS код может содержать столько стилевых правил, сколько нужно.

Наследование стиля
---

- По умолчанию элемент **child** будет наследовать стиль от своего **parent**
- Можно **переопределить наследование стиля,** создав другое правило для дочернего элемента
- Селектор **descendant selector** целиком находит дочерний элемент, вложенный в конкретного родителя

При стилизации реальных веб-страниц, код CSS может быстро расти в объеме. Поэтому нужно использовать **наследование стилей** для создания более точных правил и написания кода, который прост, организован, понятен и эффективен.

**Вложенность** в HTML - это когда некоторые теги распологаются внутри других. Элементы внешнего тега известны как **parent (родитель),** внутренние элемента - **child (дочерние).** Правила стилизации для родительских элементов также будут применяться к дочерним элементам по умолчанию. Это известно как **наследование.** Дочерние элементы наследуют стили от своих родителей.
```
<head>
  <style>
    p{
      background-color: plum;
      color: darkblue;
    }
  </style>
</head>

<body>
  <p>Buy a ticket to <b>Portugal</b></p>
</body>
```

По умолчанию, дети наследуют стиль своего родителя. Если вам нужно, чтобы ребенок имел другой стиль, вы должны написать отдельное правило для ребенка.
```
<head>
  <style>
    p {
      color: lightgray;
      background-color: black;  
    }

    em {
      color: plum;
      background-color: darkslategrey;
    }
  </style>
</head>

<body>
  <p><em>Programming</em> is a valuable skill
  in today's digital age. Learning to
  code is a journey that can
  open up many opportunities.</p>
</body>
```

Можно использовать комбинацию селекторов, чтобы создать более точные правила. **Descendant selector - Селектор потомка** находит детей внутри конкретного родителя. Он состоит из селектора родителя, за которым следует пробел, за которым следует селектор ребенка.
```
<head>
  <style>
    h1 u {
      color: seagreen;
    }
  </style>
</head>
<body>
  <h1>Back to <u>school!</u></h1>
  <p>Our back to <u>school</u> sale from July 15th.</p>
</body>
```

ID и Class Selectors
---

- Селектор **ID** использует символ хеша **#** и целится в конкретный элемент
**Класс** дает общий идентификатор группе элементов
- Селектор класса использует **точку "."** и целится в группу элементов с одинаковым классом

Для полного контроля над дизайном элементов HTML, можно присвоить им **ID** и **классы**, ID для обращения к конкретным элементам, а классы - для обращения к группам элементов.

**Атрибут id** используется для присвоения уникального идентификатора конкретному элементу на странице, и далее для идентификации уникальных элементов в HTML документе.
```
<p id="intro">Have a great movie time!</p>
```

Чтобы идентицировать конкретные элементы, используя хештег # за которым следует имя ID в качестве селектора.
```
<head>
  <style>
    #heading {
      background-color: DodgerBlue;
      color: white;
      text-align: center;
    }
    #movie {
      text-align: center;
      background-color: grey;
    }
  </style>
</head>
<body>
  <h1 id="heading">Movie Stream</h1>
  <h2 id="movie">Matrix</h2>
  <p>Genre: Action, Sci-fi</p>
</body>
```

Другой способ идентификации элементов - это атрибут **class**, используется чтобы присвоить один и тот же идентификатор группе элементов.
```
<p class="movie">Avatar</p>
<button class="movie">Watch now</button>
```

- **id** - уникальный элемент
- **class** - несколько элементов

Можно создавать правила стилизации для группы элементов в одном классе (группе). Для этого используется **точка "."** за которой следует имя класса, чтобы целенаправленно обратиться ко всем элементам в этом классе. Т.е. можно дать одно и то же имя класса для нескольких элеменов.
```
<head>
<style>
  .intro {
    color: darkblue;
    font-size: 28px;
    text-align: center;
  }
  .content {
    color: navy;
    font-size: 18px;
  }
</style>
</head>
<body>
  <h1 class="intro">Welcome to
  FitLife Blog</h1>
  <p class="content">Get inspired to lead a
  healthy and active lifestyle.</p>
  <p class="content">Explore workout routines
  and nutritious recipes.</p>
  <button class="content">Signup</button>
</body>
```

- **id: "#"**
- **class: "."**

Также можно нацелиться только на те элементы определенного типа, которые имеют определенный класс. Это правило CSS изменит только параграфы с классом **content:**
```
<head>
  <style>
    p.content {
      color: navy;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <h1 class="intro">Welcome to
  FitLife Blog</h1>
  <p class="content">Get inspired to lead a
  healthy and active lifestyle.</p>
  <p class="content">Explore workout routines
  and nutritious recipes.</p>
  <button class="content">Signup</button>
</body>
```

Стандарты и Лучшие Практики
---

- **Specificity** сообщает браузеру, какое правило применять
- **Comments** в CSS начинаются с /* и заканчиваются на */
- **External CSS** означает отдельный файл для правил стилизации

Иногда веб-браузеры решают, какое правило приоритизировать, когда несколько правил одновременно нацелены на один и тот же элемент. HTML элемент может быть стилизирован разными способами. Например, элемент может иметь как класс, так и ID.
```
<p id="text1" class="info">Text</p>
```
где: "p" - селектор элемента; "text1" - селектор ID; ".info" - селектор класса.

Каждый тип CSS селектора имеет свой приоритет. Когда несколько CSS правил нацеливаются на один и тот же HTML элемент, браузер использует следующий порядок, чтобы решить, какое правило применить:

Selectors Priority: 1 - Inline style; 2 - IDs; 3 - Classes; 4 o- Elements

Порядок приоритетов известен как **Specificity - специфичность**. Специфичность - это алгоритм, используемый браузерами для определения правила, применяемого к элементу. Это необходимо, потому что HTML-элемент может быть стилизирован разными способами. В данном примере Text будет цвета blue потому что ID #p1 имеет больший приоритет в сравнении с Element p.
```
<head>
  <style>
    p {
      color: red;
    }
    #p1 {
      color: blue;
    }
  </style>
</head>

<body>
  <p id = "p1">Text</p>
</body>
```

Комментарии помогают другим людям (и будущему вам!) читать ваш код. В CSS начинаются с /* и заканчиваются */ - т.е. звездочки находятся внутри коммента.
```
<head>
  <style>
    /*style rule for the menu class*/
    .menu {
      font-size: medium;
      background-color: lightblue;
    }
  </style>
</head>

<body>
  <button class="menu">Save for later</button>
  <button class="menu">Add to cart</button>
</body>
```

При использовании встроенного CSS, комментарии должны находиться в тегах <style>, а при использовании внутреннего стиля техники, весь CSS код группируется вместе в HTML документе в одном наборе <style> тегов

Альтернативой встроенным и внутренним CSS является **внешний CSS**. Внешний CSS код написан вне HTML документа, в отдельном файле. Одно из преимуществ внешнего CSS заключается в том, что один и тот же файл стилей CSS может использоваться несколькими документами HTML (или веб-страницами). Некоторые разработчики предпочитают внешний CSS, потому что он разделяет структуру и стиль на разные файлы. Это означает, что проект веб-страницы будет состоять из нескольких файлов с разными расширениями файлов. Внешний CSS очень полезен для многостраничных сайтов, так как позволяет стилизовать весь сайт в одном месте.

*.html - структура
*.css - стиль

Во внешнем CSS файле не нужны теги <style>, правила стилизации добавляются напрямую. Пример содержимого файла main.css
```
.heading {
  font-size: large;
  color: blueviolet;
}

.description {
  font-size: medium;
  color: firebrick;
}

button {
    background-color: burlywood;
}
```

Проект страницы профиля Шаг 1
---

Task 1.
Страницы профилей пользователей имеют большое влияние на успех веб-сайта. Давайте начнем с применения некоторых цветов и выравниваний.
Задания:
1. Установите цвет фона тела на DarkSlateGrey
2. Выровняйте по центру заголовки и абзацы и установите для их текста белый цвет
3. "Запустите" код, чтобы предварительно просмотреть страницу. Затем "сохраните" свой прогресс и двигайтесь дальше
```
<html>
<head>
  <title>John Doe's Profile</title>
  <style>
    /*Task 1*/
    body {
      background-color: DarkSlateGrey;
      }
    h2, p {
      text-align: center;
      color: white;
      }
  </style>
</head>
<body>
  <ul id="profile">
    <img src="https://blob.sololearn.com/courses/ava.png">
    <h2>John Doe</h2>
    <p>🇺🇸USA</p>
    <li>25 Followers</li>
    <li>20 Following</li>
    <li>⭐️1581 XP</li>
  </ul>
  <div id="streak">Streak
    <ul>
      <li class="active-day">M</li>
      <li class="active-day">T</li>
      <li class="active-day">W</li>
      <li class="inactive-day">T</li>
      <li class="inactive-day">F</li>
      <li class="inactive-day">S</li>
      <li class="inactive-day">S</li>
    </ul>
    <p>Current Streak: 3</p>
    <p>Longest Streak: 16</p>
  </div>
</body>
</html>
```

Контрольные вопросы к модулю 1

Стилизация элементов
===

Введение в цвет
---

- **RGB** - это цветовая модель для доступа к широкому спектру цветов
RGB использует 3 значения, представляющие интенсивность **красного, зеленого** и **синего**
- **HEX коды** сокращают представление цветов

Цвет является одним из самых важных элементов в дизайне. Наиболее распространенные цвета имеют названия. CSS позволяет использовать цвета с названиями и даже без них, используя цветовые модели.

**Цветовая модель** - это способ представления и воссоздания реальных цветов с использованием кодов. **RGB** - одна из наиболее используемых цветовых моделей. RGB модель создает цвета путем комбинирования разных количеств (интенсивностей) красного, зеленого и синего; каждый варьируется от 0 до 255. **rgb(255, 255, 255)** представляет белый цвет. Регулируя уровни красного, зеленого и синего, можно получить практически любой цвет. Значения RGB заключены в скобки и разделены запятыми. Каждое количество (или интенсивность) красного, зеленого и синего колеблется от 0 до 255. 

color - CSS свойство, используемое для применения цвета к тексту, а background-color - к фону. В примере приведено правило CSS, которое делает заголовки 1 уровня синими:
```
h1 {
  color: blue;
  background-color: rgb (255,255,0);
}
```

Цвета в модели RGB также могут быть представлены в виде **HEX-кодов**. HEX-коды короче, например #FFFFFF соответствует белому цвету, а #FF9595 розовому. HEX-коды начинаются с символа хеша #, за которым следуют 3 пары символов, каждая из которых представляет интенсивность красного, зеленого и синего соответственно. Каждый символ в HEX-коде может иметь одно из 16 возможных значений, начиная от 0 до 9 и расширяясь до букв от A до F. Каждая пара варьируется от 00 (наименее интенсивный) до FF (наиболее интенсивный). Представление чисел в системе HEX является более эффективным. На цвет требуются только 2 цифры. Цветовые модели и коды нужны, потому что существует слишком много цветов, чтобы каждому дать отдельное имя.

Устройства отображения, такие как экран телефона, монитора, телевизора, состоят из крошечных элементов изображения, известных как пиксели. Каждый пиксель может излучать комбинацию красного, зеленого и синего света для создания любого цвета в модели RGB.

Размеры
---

- размер в CSS может быть измерен и установлен в **пикселях (px)** и **процентах (%)**
- **проценты %** позволяют создавать более адаптивные дизайны, корректируясь в зависимости от размеров родительских элементов

Чтобы создавать страницы, которые выглядят красиво и сбалансировано, нужно полностью контролировать размеры элементов. Дисплей, подобный экрану телефона, состоит из элементов изображения или пикселей. Пиксели используются в качестве **единицы измерения** для контроля размеров элементов. Свойство font-size контролирует размер текста:
```
button {
  font-size: 32px;
}
```

В большинстве веб-браузеров, размер текста в абзацах, кнопках, списках и таблицах по умолчанию равен 16px. Можно использовать значения, такие как small (13px), medium (16px) и large (18px) для размера текста. У них уже установлены единицы пикселей.

Современные веб-сайты создаются таким образом, чтобы выглядеть отлично на экранах различных размеров и разрешений. Этот подход известен как адаптивный веб-дизайн. Использование пикселей в качестве единицы измерения не является лучшей практикой в отношении адаптивного веб-дизайна. Экраны разных размеров и разрешений имеют разное количество пикселей, а пиксели являются единицами фиксированного размера.

Чтобы дизайн вашей страницы отлично выглядел на любом экране, используются **проценты (%)** для установки относительных размеров. Это обеспечивает последовательный дизайн на разных размерах экрана. При стилизации элемента с использованием процентов (%), 100% будет соответствовать полному размеру его родительского элемента.
```
img {
  width: 50%;
}
```

Все элементы веб-страницы, которые видны в браузере, вложены внутрь <body>. По умолчанию, ширина тела страницы соответствует ширине экрана устройства. Это очень полезно при проектировании адаптивных сайтов. Если ширина элемента HTML установлена на 50%, он займет половину ширины своего родительского элемента.

Также можно использовать проценты для установки размера шрифта. Размеры шрифтов будут рассчитываться с использованием размера шрифта родителя в качестве референса. Если размер родительского шрифта установлен на 20px, то дочерний, с font-size равным 50% будет отображать текст размером 10px.

*.html
```
<body>
  <div class="parent">
    Parent Text (20px)
      <div class="child">
        Child Text (50% of Parent = 10px)</div>
  </div>
</body>
```

*.css
```
.parent {
    font-size: 20px;
    background-color: #98FB98;
}

.child {
    font-size: 50%;
    background-color: #FFD700;
}
```

Стилизация текста
---

- ```text-align``` контролирует горизонтальное выравнивание текста
-  ```text-decoration``` добавляет декоративные эффекты к тексту
-  ```text-transform``` изменяет написание текста
-  ```text-shadow``` применяет теневые эффекты за текстом

Еще одним важным элементом веб-дизайна является стилизация текста. 
```text-align: center``` - выравнивание текста (по аналогии - right, left)

Используйте ```text-align: justify``` для выравнивания текста по обоим краям, регулируя расстояние между словами, чтобы гарантировать, что каждая строка имеет одинаковую ширину
```
p {
  text-align: justify;
}
```

Можно добавить text-decoration (подчеркивание, надчеркивание, зачеркивание), чтобы передать смысл или привлечь внимание к определенным частям текста, например, к ссылкам.
```html
<html>
<body>
  <h1>Underlined text</h1>
  <h2>Overlined text</h2>
  <h3>Line-through text</h3>
  <h4>Underlined and overlined text</h3>
</body>
</html>
```
```css
body {
  background-color: #333333;
}
h1 {
  /*Underlined text*/
  text-decoration: underline;
  color: #F28D35;
}
h2 {
  /*Overlined text*/
  text-decoration: overline;
  color: #6BBE92;
}
h3 {
  /*Line-through text*/
  text-decoration: line-through;
  color: #D83367;
}
h4 {
  /*Underlined and overlined text*/
  text-decoration: underline overline;
  color: #149EF2;
}

Некоторые свойства CSS могут принимать несколько значений. Вы можете контролировать цвет декорации, добавив название цвета, rgb или hex-код после типа декорации.
```html
html>
  <body>
    <h1>My Personal Blog</h1>
    <h2 class="article-title">Adventures in New Zealand</h2>
    <p>During my trip to New Zealand, I had the chance to visit...</p>
    <h2 class="article-title">Gourmet Cooking on a Budget</h2>
    <p>Believe it or not, it's possible to cook gourmet meals without breaking the bank...</p>
  </body>
</html>
```
```css
body {
  background-color: #F3F4F6;
  color: #333333;
}
h1 {
  text-align: center;
  color: #555555;
}
.article-title {
  text-decoration: underline #FF4500;
  font-size: 24px;
}
```

Текстовое оформление может принимать различные стили, такие как точечный, двойной, пунктирный и волнистый.
```html
<body>
  <div class="container">
    <p class="double">
      This is a double underline.</p>
    <p class="dotted">
      This is a dotted underline.</p>
    <p class="dashed">
      This is a dashed underline.</p>
    <p class="wavy">
      This is a wavy underline.</p>
  </div>
</body>
```css
body {
  background-color: #000A23;
  color: #EDEDED;
}
p {
  font-size: 18px;
}
.double {
  text-decoration: double underline #E67112;
}
.dotted {
  text-decoration: underline dotted #2A9D8F;
}
.dashed {
  text-decoration: dashed underline #E76F51;
}
.wavy {
  text-decoration: wavy underline #62767E;
}
```

Свойство ```text-decoration``` - это короткий и простой способ ссылаться на различные подсвойства, такие как ```text-decoration-line```, ```text-decoration-color``` и ```text-decoration-style```.

```css
text-decoration: wavy overline #2A9D8F;

text-decoration-line: overline;
text-decoration-color: #2A9D8F;
text-decoration-style: wavy;
```

Свойство ```text-transform``` позволяет вам контролировать использование заглавных букв в текстовом контенте (каждое слово с заглавной, все заглавные и все строчные).
Оно может принимать 3 значения: ```capitalize```, ```uppercase``` и ```lowercase```.
```html
<html>
  <body>
    <p class="capitalize">
    this is a sentence with capitalize transformation.</p>
    <p class="uppercase">
     This is a sentence with uppercase transformation.</p>
    <p class="lowercase">
     THIS IS A SENTENCE WITH LOWERCASE TRANSFORMATION.</p>
  </body>
</html>
```
```css
.capitalize { 
  text-transform: capitalize; 
}
.uppercase { 
  text-transform: uppercase; 
}
.lowercase { 
  text-transform: lowercase; 
}
body{
  background-color: #000A23;
  color: white;
}
```

Например CSS правило для кнопки с текстом в верхнем регистре, размером шрифта 18px и зеленым фоном
```css
button {
  text-transform: apitalize;
  background-color: green;
  font-size: 18px;
}  
```

Свойство ```text-shadow``` создает эффект глубины, придает выразительность или просто добавляет стильный акцент в вашу типографику.
Оно принимает два обязательных значения в следующем порядке: сначала горизонтальное смещение, затем вертикальное.
Горизонтальное смещение - это насколько далеко вправо (положительные значения) или влево (отрицательные значения) будет тень.
Вертикальное смещение - это насколько далеко вниз (положительные значения) или вверх (отрицательные значения) будет тень.
Как пример - применить теневой эффект текста со смещением в 5px вправо и 6px вверх:
```css
h1 {
  text-shadow: 8px 6px;
}
```

```text-shadow``` может принимать два дополнительных, необязательных значения.
- ```blur radius:``` степень размытия, применяемая к тени
- ```color:``` цвет тени
```html
<html>
  <body>
    <h1>Harry Potter</h1>
  </body>
</html>
```
```css
body {
  background-color: #1a1a1a;
}

h1 {
  color: #FFFFFF; /* white colored text */
  text-shadow: 4px 4px 4px #4296CE; 
  font-size: 4rem;
}
```

Важно сохранять правильный порядок значений для свойства ```text-shadow```, иначе оно может не дать желаемого эффекта.


https://youtu.be/hft4XYApT44?list=PLDyJYA6aTY1meZ3d08sRILB46OJ-wojF2
Изучение CSS для новичков / Урок #1 – Введение в CSS. Что это и как с ним работать?

00:00 Введение в Cascading Style Sheets (CSS)

• Видео начинается с приветствия и обсуждения плана курса по изучению языка стилей CSS.
• CSS - это каскадные таблицы стилей, которые позволяют описывать стили для любых объектов в HTML.
• Без CSS невозможно создать красивый веб-сайт, так как он позволяет добавить стили к элементам.

02:55 Установка текстового редактора Atom

• В этом уроке автор устанавливает текстовый редактор Atom, который будет использоваться для написания кода.
• Установка Atom происходит без подводных камней, и после запуска открывается окно с настройками.
• Автор показывает, как изменить тему и формат подсветки кода в настройках Atom.


https://youtu.be/DX9ITfNVM7I?list=PLDyJYA6aTY1meZ3d08sRILB46OJ-wojF2
Изучение CSS для новичков / Урок #2 – Форматы подключения стилей

00:00 Создание нового файла и добавление стилей

• Создание новой папки для хранения веб-сайта и открытие ее в текстовом редакторе Atom.
• Создание файла index.html с основным HTML-синтаксисом и добавление текста-заглушки.

02:46 Способы подключения стилей

• Три формата подключения стилей: атрибут style, тег style и тег style внутри тега head.
• Атрибут style подходит для добавления одного или двух стилей, тег style - для нескольких стилей.

06:39 Использование тега style

• Тег style внутри тега head для подключения стилей к определенным элементам.
• Пример: выбор всех тегов p и добавление стиля color: red.

    <style>
        p {
            color: red;
        }
    </style>

07:36 Подключение стилей к HTML-странице

• В видео обсуждается три формата подключения стилей к HTML-странице: через тэг style, через атрибут style и через отдельный файл CSS.
• Первый формат, через тэг style, добавляет стиль ко всем тэгам, указанным в этом тэге (см выше).
• Второй формат, через атрибут style, добавляет стиль к конкретному элементу, указанному в этом атрибуте.

<p style="color: red;"></p>

• Третий формат, через отдельный файл CSS, является наиболее правильным и удобным, так как позволяет отделить CSS от HTML-кода.

<link rel="stylesheet" href="css/main.css">

09:33 Создание и подключение CSS-файла

• В видео показано, как создать отдельный файл CSS и подключить его к HTML-странице с помощью тега link.
• В файле CSS можно прописать любые свойства и селекторы, которые будут применены к HTML-коду.

body {
    color: red;
}

11:25 Варианты подключения CSS

• В видео обсуждаются три варианта подключения CSS к HTML-странице: через тэг style, через атрибут style и через отдельный файл CSS.
• Третий вариант, через отдельный файл CSS, является наиболее правильным и удобным, так как позволяет отделить CSS от HTML-кода.


https://youtu.be/LQxx5Z9XEdM?list=PLDyJYA6aTY1meZ3d08sRILB46OJ-wojF2
Изучение CSS для новичков / Урок #3 – Селекторы для выборки элементов

00:00 Селекторы в CSS

• В этом уроке изучаются различные селекторы, которые позволяют выбирать нужные HTML-объекты для добавления стилей.
• В качестве селектора можно использовать название тега, к которому нужно добавить стили.
• Также можно использовать классы и идентификаторы для выбора объектов.

01:51 Классы и идентификаторы

• Классы позволяют быстро выбрать нужные объекты и добавить к ним свойства.
• Идентификаторы должны быть уникальными на странице и используются для одиночных объектов, таких как шапка или футер сайта.
• В обоих случаях для обращения к классу или идентификатору нужно указать его название и знак решетки.

07:31 Селекторы выбора

• В видео обсуждаются три формата выбора различных HTML-объектов: по названию тэга, по классу и по идентификатору.
• Обсуждаются вложенные селекторы выбора, которые позволяют выбирать объекты, находящиеся внутри других объектов.

10:24 Вложенные селекторы

• В видео объясняется, как использовать вложенные селекторы для добавления стилей только к объектам, находящимся внутри других объектов.
• Приводится пример использования вложенных селекторов для добавления стилей только к тэгам б, находящимся внутри тэга диф.

12:11 Группировка селекторов

• В видео объясняется, как группировать селекторы для добавления стилей к нескольким объектам одновременно.
• Приводится пример использования запятой для указания дополнительных селекторов, к которым будут добавлены стили.

Пример:

Файл index.html*

<body>
    <!-- <p style="">-->
    <p id="text-in-p">Lorem, ipsum dolor <b>sit</b> amet consectetur adipisicing elit. <i class="main-text">Reprehenderit</i> quas nobis laborum nam sequi expedita officia <b class="main-text">distinctio</b> aperiam, voluptate minus, <b id="bold-text-in-p">asperiores</b> dolores officiis perferendis! Quibusdam debitis veritatis neque excepturi at.</p>

    <div>
        Lorem ipsum dolor sit, amet <b>consectetur</b> adipisicing elit. Ducimus dolorum dignissimos sint, <i>accusantium</i> nulla a quos explicabo maiores cum earum, blanditiis ad repellendus at eligendi odit delectus laboriosam, reiciendis qui!
    </div>
</body>

Файл main.css*

.main-text {
    color: red;
}

#text-in-p {
    color: blue;
}

#bold-text-in-p {
    color: green;
}

b {
    color: black;
}

div b, div i {
    color: brown;
}

/*div, .class-name, #id, div p {
    color: red
}*/

* Далее не будут указываться названия файлов. Код  начинающийся с тегов принадлежит файлу *.html

https://youtu.be/nZHrCDJEnw4?list=PLDyJYA6aTY1meZ3d08sRILB46OJ-wojF2
Изучение CSS для новичков / Урок #4 – Псевдоклассы и псевдоэлементы

00:00 Псевдоклассы и псевдоэлементы

• В языке CSS существуют понятия псевдоклассов и псевдоэлементов.
• Псевдоклассы позволяют управлять свойствами CSS для различных состояний объекта.
• Например, можно изменить цвет ссылки при наведении на нее.
• Псевдоэлементы позволяют добавлять стили к определенным частям элементов, таким как текст или подчеркивание.

01:57 Примеры использования псевдоклассов

• В примере с ссылкой, можно изменить цвет ссылки и подчеркивание при наведении.
• Также можно указать, что текст будет подчеркиваться при наведении.
• Псевдокласс "hover" позволяет добавить стили, которые будут применяться к объекту при наведении на него.

файл html:
<a href="#" class="main_link">Ссылка</a>

файл css:
.main_link {
    text-decoration: none;
}

.main_link:hover {
    color: blue;
    text-decoration: underline;
    text-decoration-color: red;
    cursor: pointer;
}

08:31 Псевдокласс "active"

• Псевдокласс "active" срабатывает каждый раз, когда пользователь нажимает на объект.
• В примере с текстом, можно установить подчеркивание при нажатии.
• Псевдокласс "visited" добавляет стили, которые будут применяться к посещенным ссылкам.

<p class="main_link">Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum autem eveniet placeat doloremque quod vero in aspernatur, sit molestias veritatis fuga vel quaerat beatae! Quam vel doloribus accusantium repellat pariatur.</p>

.main_link:active {
    text-decoration: line-through;
}

.main_link:visited {
    color: grey;
}

09:29 Псевдоклассы и их использование

• В видео обсуждается использование псевдоклассов для установки стилей для ссылок, которые уже были посещены.
• Внутри псевдокласса visited обычно прописывается изменение цвета текста.
• Также обсуждаются другие псевдоклассы, такие как focus, disable и enable, которые позволяют выбирать только определенные элементы.

<input type="text" placeholder="Введите текст">

<p class="text">Smile</p>
<p class="text"></p>

input {color: blue;}
input:focus {color: red;}

p.text:not(:empty) {
    color:grey
}

17:06 Псевдоэлементы и их использование

• В видео объясняется использование псевдоэлементов для работы с определенной частью текста внутри HTML-объекта.
• Обсуждается псевдоэлемент after, который позволяет обратиться к невидимой части текста за объектом.
• Приводится пример использования этого псевдоэлемента для вывода текста после объекта.

19:00 Использование псевдоэлементов

• В видео объясняется, как использовать псевдоэлемент after для добавления текста после объекта.
• Также можно использовать псевдоэлемент before для добавления текста перед объектом.
• Псевдоэлемент first-letter позволяет обратиться к первому символу внутри абзаца, а first-line - к первой строке.

<div id="some_id">Some text</div>

#some_id::after {
    content: "123";
    color: red;
    text-decoration: line-through ;
	
#some_id::before {
    content: "123";
    color: red;
    text-decoration: line-through ;
	
p.main_link::first-letter {
    color: green;
}

p.main_link::first-line {
    color: magenta;
}

24:39 Работа с псевдоклассами

• В видео объясняется, как использовать псевдокласс first-of-type для добавления стиля только к первому элементу в списке.
• Псевдокласс last-of-type позволяет добавить стиль только к последнему элементу в списке.
• Эти псевдоклассы и псевдоэлементы могут быть использованы для работы с различными частями объектов и их состояниями.

<p class="text">Smile</p>

p:first-of-type {
    text-decoration: line-through;
}

p:last-of-type {
    text-decoration: line-through;
}


https://youtu.be/k2XTkIW9Y0I?list=PLDyJYA6aTY1meZ3d08sRILB46OJ-wojF2
Изучение CSS для новичков / Урок #5 – Работа с фоновыми картинками

00:00 Стили для работы с фоновыми картинками

• В языке CSS существуют различные стили для работы с фоновыми картинками на сайте.
• В этом уроке мы изучим некоторые из них.

01:52 Установка заднего фона

• Для установки заднего фона можно использовать свойство "background-color".
• Можно также указать изображение, которое будет добавлено на страницу, используя свойство "background-image".

04:32 Повторение картинки и позиция

• Можно указать, каким образом картинка будет повторяться на странице, используя свойство "background-repeat".
• Также можно указать, где именно будет находиться картинка, используя свойство "background-position".

body {
    background-color: #7f9ab3;
    color: blue;
    background-image: url('https://i.artfile.ru/3000x2001_1534615_[www.ArtFile.ru].jpg');
    background-repeat: no-repeat;
    background-position: center;
}

06:23 Работа с задним фоном

• Создание функции для отображения картинки на заднем фоне.
• Установка свойства "no-repeat" для предотвращения повторения картинки.
• Установка свойства "center" для центрирования картинки по вертикали.
• Установка свойства "height" для указания высоты картинки в процентах от высоты экрана.

08:19 Использование свойства "background-size"

• Установка свойства "background-size" для указания размера картинки.
• Использование значения "cover" для растяжения картинки на 100% ширины заднего фона.

10:15 Использование свойства "background-attachment"

• Установка свойства "background-attachment" для фиксации картинки на заднем фоне.
• Создание двух объектов с разными высотами для демонстрации эффекта.
• Использование свойства "background-attachment: fixed" для фиксации картинки на заднем фоне.

<body>
    <div id="first"></div>
    <div id="second"></div>
</body>

#first {
    /*background-color: #7f9ab3;
    color: blue;
    background-image: url('https://i.artfile.ru/3000x2001_1534615_[www.ArtFile.ru].jpg');
    background-repeat: no-repeat;
    background-position: center;*/

    color: blue;
    background: #7f9ab3 url('https://i.artfile.ru/3000x2001_1534615_[www.ArtFile.ru].jpg') no-repeat center top;
    height: 500vh;
    background-size: cover;
    background-attachment: fixed;
}

#second {
    height: 2000px;
}

https://youtu.be/B4x380VocnQ?list=PLDyJYA6aTY1meZ3d08sRILB46OJ-wojF2
Изучение CSS для новичков / Урок #6 – Стили для текста

00:00 Работа с текстом

• Создание параграфа и добавление текста.

<body>
    <p class="main_text">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Repellendus necessitatibus quidem quia quibusdam accusantium veritatis dolore ducimus voluptates nulla rem distinctio obcaecati tenetur, quos et corrupti magnam nemo harum adipisci.</p>
	
	<!--Из пред урока-->
    <div id="first"></div>
    <div id="second"></div>
</body>

• Использование свойства color для установки цвета текста.
• Установка свойства text-align для определения расположения текста.
• Работа с размером шрифта с помощью свойства font-size.
• Установка размера шрифта в относительных единицах с помощью свойства font-size.

01:56 Дополнительные свойства

• Использование свойства font-style для установки наклона текста.
• Использование свойства font-weight для установки жирности текста.
• Использование свойства font для установки шрифта.
• Использование сервиса Google Fonts для установки нестандартных шрифтов.
https://fonts.google.com/selection

06:41 Работа с шрифтами

• Вместо скачивания шрифта, можно указать ссылку на ресурс с ним.
• Указывается формат жирности шрифта, например, "болдер".
• Импорт шрифта в проект и указание его в качестве шрифта.

08:38 Свойства текста

• "text-transform" позволяет указать регистр символов.
• "word-spacing" - пространство между словами.
• "letter-spacing" - пространство между символами.
• "line-height" - расстояние между строками.
• Применение свойств "text-decoration" и "cursor" к тексту.

.main_text {
    color: 000;
    text-align: center;
    font-size: 1.2em;
    font-style: normal;
    font-weight: 300;
    font-family: 'Sansita Swashed', cursive;

    text-transform: lowercase;
    word-spacing: 20px;
    letter-spacing: 2px;
    line-height: 50px;
    text-decoration: line-through;
    cursor: copy;
}


https://youtu.be/EjCTUncWviU?list=PLDyJYA6aTY1meZ3d08sRILB46OJ-wojF2
Изучение CSS для новичков / Урок #7 – Стили для блоков

00:00 Создание блока с помощью CSS

• Создание объекта "блок" с идентификатором "блок".

<body>
    <div id="block">Simple</div>    
</body>

• Установка высоты и ширины блока в 200 пикселей.
• Добавление обводки к блоку с помощью свойства "border".
• Установка ширины обводки в 2 пикселя, типа обводки - "solid", цвета - "silver".

02:55 Добавление стилей к обводке

• Установка различных стилей обводки: "dotted", "silver".
• Работа с различными свойствами обводки: border, border-bottom, border-top, border-right.
• Установка ширины обводки с помощью свойства "width", "style".

07:38 Добавление прозрачности и внешних отступов

• Добавление прозрачности к блоку с помощью свойства "opacity".
• Установка значения прозрачности от 0 до 1.
• Добавление внешних отступов с помощью свойства "margin".
• Установка значения внешних отступов в 20 пикселей.
• Работа с внешними отступами для каждой стороны блока.

10:31 Добавление внешних и внутренних отступов

• В видео объясняется, как добавить внешние и внутренние отступы к объектам в CSS.
• Внешние отступы добавляются с помощью свойства "margin", а внутренние - с помощью "padding".
• Если указать только одно значение для свойства, оно будет добавлено ко всем сторонам объекта.
• Если указать два значения, первое будет добавлено к верхней и нижней сторонам, а второе - к боковым.
• Если указать три значения, первое будет добавлено к верхней и нижней сторонам, второе - к боковым, а третье - к одной из боковых сторон.
• Если указать четыре значения, каждое из них будет добавлено к соответствующей стороне объекта.

#block {
    background: red;
    height: 200px;
    width: 300px;
    border: 7px dotted silver;
    border-bottom: 0;
    border-top-style: solid;
    border-style: double;

    border-radius: 15px 50% 25px 50px;
    opacity: 0.9;
    margin: 20px 50px;
    padding: 20px 50px;
}

14:09 Удаление внутренних и внешних отступов

• В видео объясняется, как удалить внутренние и внешние отступы, которые добавляются по умолчанию в браузерах.
• Для этого нужно обратиться к тэгу "body", "html" или прописать знак звездочки, чтобы отключить все внутренние и внешние отступы.

* {
    margin: 0;
    padding: 0;
}

15:09 Работа с блочными и строчными объектами

• В видео объясняется, что строчные объекты, такие как "span", "em", "b", "a", не могут иметь свойства "width", "height", "margin", "padding" и другие.
• Чтобы решить эту проблему, можно использовать свойство "display", чтобы указать, что объект будет блочным или строчным.
• Например, если объект является строчным, можно использовать "display: inline", чтобы он вел себя как обычный строчный объект.
• Если объект является блочным, можно использовать "display: block", чтобы он вел себя как блок.

<body>
    <div class="block">Simple</div>
        
    <span class="block">Simple</span>
</body>

.block {
    background: red;
    height: 200px;
    width: 300px;
    border: 7px dotted silver;
    border-bottom: 0;
    border-top-style: solid;
    border-style: double;

    border-radius: 15px 50% 25px 50px;
    opacity: 0.9;
    margin: 20px 50px;
    padding: 20px 50px;

    display: block;
}


https://youtu.be/cVeFNl3Jz8I?list=PLDyJYA6aTY1meZ3d08sRILB46OJ-wojF2
Изучение CSS для новичков / Урок #8 – Позиционирование блоков

00:00 Позиционирование объектов с помощью CSS

• Создание нескольких объектов с идентификаторами "first" и "second" и классом "block".

<body>
    <div id="first" class="block"></div>
    <div id="second" class="block"></div>
</body>

• Удаление внешних и внутренних отступов для всех объектов.

* {
    margin: 0;
    padding: 0;
}

• Установка ширины и высоты для обоих объектов (200px).
• Установка margin для всех сторон (20px).
• Установка background для обоих объектов (yellow или red).

.block {
    width: 200px;
    height: 200px;
    margin: 20px;
    background: red;
}

01:52 Использование свойства "float"

• Обращение к объекту "first" и указание свойства "float" со значением "left".
• Результат: объект "first" прижимается к левой стороне, другие блоки обтекают его справа.
• Добавление свойства "float" со значением "left" для объекта "second".
• Результат: оба объекта находятся на одной линии, не залазят друг на друга.
• Использование значений "left" и "right" для свойства "float".
• Результат: объекты могут находиться на разных сторонах, в зависимости от значения "float".

#first {
    float: right;
}

#second {
    float: left;
    background: blue;
}

04:37 Создание веб-сайта

• Создание шапки сайта с помощью HTML и CSS.
• Использование идентификаторов вместо классов для секций сайта (потому что по одному на странице).

<body>
    <div id="header">Шапка</div>
    <div id="main">Основная часть</div>
    <div id="aside">Боковая панель</div>
    <div id="footer">Футер</div>
</body>

06:37 Стилизация шапки

• Установка высоты, текста, бордера и фона.
• Использование лайфхака из CSS для идеального расположения текста по вертикали.
Лафхак состоит в том, что чтобы текст находился идеально по вертикали по центру блока, нужно чтобы параметры height: (высота блока) и line-height: (расстояние между строк) - были одинаковыми.

#header, #footer {
    width: 100%;
    height: 70px;
    text-align: center;
    border-bottom: 4px solid silver;
    background: #333;
    color: #fff;
    line-height: 70px;
    margin-bottom: 50px;
    float: left;
}

09:07 Стилизация футера

• Установка стилей для отступа, бордера и фона.

#footer {
    margin-bottom: 0;
    margin-top: 50px;
    border-bottom: 0;
    border-top: 4px solid silver;
    float: left;
}

10:00 Стилизация основной части и боковой панели

• Установка ширины, отступа, фона и бордера для основной части.
• Установка ширины, отступа, фона и бордера для боковой панели.

12:00 Позиционирование объектов

• Автор объясняет, что для корректного позиционирования объектов на одном уровне, они должны иметь свойство "флот".
• Он добавляет "float: left;" к тегу "header" и "footer", чтобы объекты располагались в одну линию.
• Однако, если объекты имеют обводку, они могут не отображаться на одну линию.
• Автор предлагает удалить обводку или добавить "margin-left:" для корректного позиционирования.

#main {
    width: 50%;
    margin-left: 10%;
    background: #fafafa;
    border: 1px solid silver;
    padding: 20px 2.5%;
    float: left;
}

#aside {
    width: 20%;
    padding: 20px 2.5%;
    background: #fafafa;
    border: 1px solid silver;
    float: left;
    margin-left: 5%;
}

15:00 Позиционирование с помощью свойства "position:"

• Автор объясняет, что "position:" можно применять к любому блоку, и предлагает использовать его для блока "aside".
• Он демонстрирует, как можно позиционировать объект относительно его текущего положения (position: relative;), вверх, вниз или по бокам.
• Автор также объясняет, как использовать "position:" для смещения объекта по левой или правой стороне.

#aside {
    width: 20%;
    padding: 20px 2.5%;
    background: #fafafa;
    border: 1px solid silver;
    float: left;
    margin-left: 5%;
    position: relative;
    bottom: -10px;
    left: -2px;
}

17:45 Абсолютное позиционирование с помощью свойства "position: absolute;"

• Автор демонстрирует, как использовать "position: absolute;" для абсолютного позиционирования объекта относительно самого экрана.

<div id="some_block">+</div>

• Он добавляет красный объект с белым текстом, центрированным по вертикали и горизонтали, и бордер радиусом 50%.
• Автор объясняет, что "position: absolute;" позволяет абсолютно позиционировать объект относительно размеров экрана.

#some_block {
    background: red;
    color: #fff;
    text-align: center;
    width: 50px;
    height: 50px;
    line-height: 50px;
    border-radius: 50%;
    position: absolute;
    left: 20px;
    top: 50px;
}

19:41 Фиксация объекта с помощью свойства "fixed"

• Автор объясняет, что свойство "fixed" позволяет зафиксировать объект на определенной позиции.
• Он демонстрирует, как использовать "fixed" для создания зафиксированного блока на странице. При скроле страницы (т.к. высота у нее 2000 пикслелей), блок остается на месте.
• Автор подчеркивает, что "fixed" является простым и эффективным способом создания зафиксированных блоков на веб-страницах.

body {
    height: 2000px;
}

#some_block {
    background: red;
    color: #fff;
    text-align: center;
    width: 50px;
    height: 50px;
    line-height: 50px;
    border-radius: 50%;
    position: fixed;
    left: 20px;
    top: 50px;
}


https://youtu.be/zy4yzUjpnvA?list=PLDyJYA6aTY1meZ3d08sRILB46OJ-wojF2
Изучение CSS для новичков / Урок #9 – Работа со списками

00:00 Работа со списками через CSS

• В этом уроке мы научимся работать со списками через CSS.
• Сначала рассмотрим свойство "z-index:", которое позволяет указать, какой объект будет более главным в иерархии слоев.

#main {
    width: 50%;
    margin-left: 10%;
    background: #fafafa;
    border: 1px solid silver;
    padding: 20px 2.5%;
    float: left;
    position: relative;
    z-index: 1;
}

#aside {
    width: 20%;
    padding: 20px 2.5%;
    background: #fafafa;
    border: 1px solid silver;
    float: left;
    margin-left: 5%;
    position: relative;
    bottom: -10px;
    z-index: 0;
    left: -200px;
}

• Затем мы создадим новый список "ul" и добавим к нему айди "nav" (navigation).

    <div id="header">Шапка</div>
    <ul id="nav">
        <li>Главная</li>
        <li>О Нас</li>
        <li>Контакты</li>
    </ul>
    <div id="main">Основная часть</div>

• Укажем свойство "list-style:" со значением "none;", чтобы убрать все стили из списка.
• Затем укажем, что все объекты будут блочными или строчными.
• Далее мы работаем с навигацией, указывая, что это будет блочный объект с отступом слева и шириной 50%.
• Затем мы указываем стили для каждого элемента списка (#nav li) , включая бэкграунд, бордер, пединг и мерджин.
• В конце мы добавляем стили для наведения, включая изменение цвета текста, бордер колор и бордер радиус.

03:35 Создание менюшки

• Мы создаем менюшку, используя список и добавляя стили.
• Сначала мы указываем, что это будет дисплей блок, флот лефт и ширина 50%.
• Затем мы указываем текст элайн с центром и нижний отступ.
• Для каждого элемента списка мы указываем стили, включая бэкграунд, бордер, пединг, мерджин и мерджин райт.
• В конце мы добавляем стили для наведения, включая изменение цвета текста и бордер колор.
• В итоге, мы создали полноценную менюшку, которая выглядит довольно здорово.

#nav {
    list-style: none;
    display: block;
    float: left;
    width: 50%;
    nav-left: 25%;
    text-align: center;
    margin-bottom: 50px;
}

#nav li {
    display: inline;
    background: #fafafa;
    border: 1px solid silver;
    padding: 0 20px;
    cursor: pointer;
}

#nav li:hover {
    color: #fff;
    background: #333;
    border-radius: 5px;
    border-color: #333;
}

#nav li:not(:last-of-type) {
    margin-right: 20px;
}

К получившимся кнопкам из элеменов списка - можно привязать ссылки примерно корявенько вот так:

<li><a href="about.html">О Нас</a></li>

Нужно отредактировать стили ссылки.
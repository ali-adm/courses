Уроки JavaScript для начинающих / #1 – Введение в язык JS. Что к чему?

https://youtu.be/fHl7UyRjOf0?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Введение в язык программирования Java Script

• Видео начинается с приветствия и представления курса по изучению языка программирования Java Script.
• В ходе курса будут рассмотрены все основные моменты языка, а также его использование на практике.

00:55 История и популярность Java Script

• Java Script появился в 1995 году и изначально не был популярным.
• Сегодня он используется в 97% сайтов, что делает его одним из самых востребованных языков для изучения и трудоустройства.

01:54 Использование Java Script в веб-разработке

• Java Script используется для создания клиентских функций, обработки действий пользователей и управления веб-сайтом.
• В будущем курсе будут рассмотрены основные концепции языка, такие как переменные, циклы, условия и манипуляции с HTML-объектами.

04:46 Установка текстового редактора Atom

• В качестве текстового редактора для написания кода будет использоваться Atom.
• Установка плагина Emmet для быстрого написания HTML-кода.

07:35 Заключение

• В ходе следующих уроков будет изучаться сам язык Java Script и его использование на практике.


Уроки JavaScript для начинающих / #2 – Основные моменты при работе с JavaScript

https://youtu.be/ujsgFnm2VKw?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Возможности языка JavaScript

• JavaScript отвечает за пользовательские функции, которые выполняются на стороне клиента в браузере без перезагрузки страницы.
• Примеры использования JavaScript на реальных веб-сайтах, таких как Google.

01:55 Пользовательские функции и примеры использования JavaScript

• Пользовательские функции, которые срабатывают без перезагрузки страницы, например, при нажатии на кнопку или наведении на картинку.
• Создание кнопок, меню и других элементов на веб-сайте с помощью JavaScript.

04:33 Практика: изучение JavaScript в контексте разработки веб-сайтов

• Открытие файла index.html в браузере и изучение дополнительных HTML-тегов, таких как no-script и script.
• Вывод информации только в случае, если JavaScript выключен у конечного пользователя.

06:27 Работа с тэгом script

• Тэг script используется для подключения сторонних файлов или прописания джава скрипт кода внутри этого тэга.
• Тэг script можно прописать в разных местах, но обычно его помещают перед закрывающимся тэгом body.

10:17 Создание комментариев

• В языке джава скрипт комментарии создаются с помощью двух слэшей.
• Многострочные комментарии создаются с помощью слэша, звездочки и закрывающей конструкции.
• Однострочные комментарии создаются с помощью двух слэшей.


Уроки JavaScript для начинающих / #3 – Вывод информации. Работа с консолью

https://youtu.be/WLsFBu_15Hw?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Вывод информации с помощью консоли разработчика

• Видео начинается с рекомендации сайта "Айти прогер точка ком", где можно найти код, домашние задания и другую полезную информацию.
• Затем автор объясняет, что код будет прописывать внутри тега "скрипт", но позже создаст отдельный файл и подключит его к странице.
• Он также обсуждает стандарты и то, что обычно код пишут в отдельных файлах.
• Затем автор переходит к методам вывода информации с помощью языка Java Script.
• Он объясняет, что можно вывести информацию как внутри тега "body", так и в консоли разработчика.

01:49 Вывод информации внутри тега "body"

• Автор объясняет, что метод "write" позволяет вывести информацию внутри тега "body".
• Он демонстрирует, как можно использовать этот метод для вывода текста "Java Script говорит: привет" на страницу.
• Затем он объясняет, что этот метод не позволяет вывести информацию внутри определенного тега, а выводит ее сразу после тега "script".

06:35 Вывод информации в консоли разработчика

• Автор переходит к выводу информации в консоли разработчика, используя объект "console".
• Он объясняет, что объект "console" имеет различные функции, которые можно использовать для вывода информации.
• Он демонстрирует, как вывести текст "Java Script говорит: привет" в консоли разработчика, и объясняет, что ссылка на файл и строку кода, которая вывела сообщение, можно найти в правой части консоли.

08:23 Работа с консолью разработчика

• В видео обсуждается использование консоли разработчика для работы с объектами и массивами.
• Консоль разработчика предоставляет дополнительные функции, такие как возможность перехода на файл, изменения кода и просмотра информации об объектах.

09:23 Методы вывода информации в консоль

• В консоли разработчика можно использовать методы "console.log" и "console.info" для вывода информации.
• Метод "console.error" используется для вывода сообщений об ошибках.
• Метод "console.warn" выводит сообщения в формате предупреждения, которые не обязательно исправлять.

11:16 Подключение и использование джава скрипт файлов

• Вместо прямого прописывания кода в теге "script", можно создать отдельный джава скрипт файл и подключить его к странице.
• В этом файле можно прописывать джава скрипт код и использовать методы вывода информации, описанные ранее.

14:05 Очистка кэша и перезагрузка страницы

• Если файл не обновляется, возможно, он попал в кэш и его нужно очистить.
• Для этого нужно нажать на кнопку "Очистить кэш" и перезагрузить страницу.


Уроки JavaScript для начинающих / #4 – Переменные и типы данных в JS

https://youtu.be/UHqnpHEXtII?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Создание переменных

• Переменные - это ячейки в памяти компьютера, где можно хранить различные значения, такие как числа, строки, булевы выражения и т.д.
• Для создания переменной используется ключевое слово "var", после которого следует название переменной.
• Важно не добавлять специальные символы в название переменной и не начинать его с числа.

01:59 Присвоение значений переменным

• Значения можно присваивать переменным в новой строке, используя знак "=".
• Например, можно присвоить число 5 переменной "num".

04:56 Вывод значений переменных

• Значения переменных можно выводить на экран, используя метод "console.log".
• Например, можно вывести переменную "num" и ее значение.

06:55 Изменение значений переменных

• Значения переменных можно изменять, используя знак "=".
• Например, можно изменить значение переменной "num" на число 7.

07:55 Создание переменных и констант

• В языке JavaScript можно создавать переменные и константы, используя ключевое слово "var" или "const".
• Константы создаются с помощью ключевого слова "const", и их значение нельзя изменить.

10:52 Типы данных и их обработка

• В JavaScript нет строгой типизации, поэтому тип данных определяется значением переменной.
• Можно создавать переменные разных типов, включая числа, строки, булевы выражения и т.д.
• При попытке добавить число к строке, число автоматически преобразуется в строку, что может привести к неожиданным результатам.
• В следующем уроке будет более подробно рассмотрено добавление математических методов к переменным.


Уроки JavaScript для начинающих / #5 – Математические действия

https://youtu.be/tPjVEiOvgwE?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Математические действия в JavaScript

• В этом уроке обсуждаются математические действия в языке JavaScript.
• Создаются две переменные с названиями "нам один" и "нам два", и выполняются различные математические действия (вычитание, сложение, умножение, деление и получение остатка от деления).

03:18 Сокращенные формы математических действий

• Обсуждаются сокращенные формы математических действий, которые применяются, когда действие нужно выполнить над одной и той же переменной.
• Например, можно обратиться к текущей переменной и добавить к ней число.

05:06 Работа со строками и числами

• Рассматривается работа со строками и числами, и как они складываются.
• Если в строке есть числа, они автоматически приводятся к формату строки.

07:36 Встроенные методы и значения

• Обсуждаются встроенные методы и значения, доступные через объект "масс".
• Приводится пример вывода числа "пи" и числа "е".
• Также рассматриваются методы "мин" и "макс", которые находят минимальное и максимальное значения среди данных значений.


Уроки JavaScript для начинающих / #6 – Условные операторы

https://youtu.be/TE0S9G3C4vU?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Условные конструкции в JavaScript

• Видео начинается с объяснения условных конструкций в языке JavaScript.
• Условные конструкции позволяют проверить определенное условие и выполнить соответствующий код в зависимости от его результата.

01:58 Примеры использования условных конструкций

• В примере демонстрируется использование условных конструкций для проверки переменной на равенство определенному значению (через if).
• Указывается, что для сравнения на равенство необходимо использовать два знака равенства.
• Также обсуждаются различные варианты сравнения переменных с различными значениями.

04:55 Дополнительные операторы и условия

• В видео обсуждаются дополнительные операторы, такие как "else if" и "else", которые могут быть использованы для обработки нескольких условий.
• Также объясняется, как использовать "else if" для проверки нескольких условий внутри одного оператора. (Логическое "и" && "или" ||)

09:45 Условные операторы

• В видео объясняется, как использовать условные операторы в JavaScript.
• Условные операторы позволяют проверять значения переменных и выполнять различные действия в зависимости от их значений.
• В примере проверяется, есть ли у человека дом, и если есть, то выполняется один код, а если нет - другой.

13:43 Оператор switch

• В видео также объясняется оператор switch, который позволяет проверять переменную на множество разных значений и выполнять разные действия в зависимости от значения.
• В примере проверяется значение переменной на 4, 45 и 40-45, и в зависимости от значения переменной выводится разный текст.

16:41 Оператор default

• В видео также объясняется оператор default, который выполняется, если все предыдущие кейсы не подошли.
• В примере выводится текст "дефолт" в случае, если значение переменной не соответствует ни одному из предыдущих кейсов.


Уроки JavaScript для начинающих / #7 - Массивы данных. Одномерные и многомерные массивы

https://youtu.be/9zVAHOiQYBo?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Создание и работа с массивами данных

• В языке JavaScript массивы данных создаются аналогично переменным, но могут содержать множество значений.
var arr = New Array (1, two, thrue, 1.63) либо кратко:
var arr = [1, two, thrue, 1.63]
• Массивы могут содержать числа, строки, булевые выражения и т.д.
• Доступ к элементам массива осуществляется через индекс, который начинается с нуля.

06:37 Многомерные массивы

• Многомерные массивы - это массивы, в которых каждый элемент является другим массивом.
• Создание многомерного массива осуществляется путем создания квадратных скобок внутри квадратных скобок.
var matrix [[], [], []]
• Работа с многомерными массивами осуществляется аналогично одномерным массивам.
var arr[][] = 


Уроки JavaScript для начинающих / #8 – Циклы в JavaScript. Операторы циклов

https://youtu.be/H39s52IW3bk?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Циклы в JavaScript

• Видео начинается с объяснения того, что циклы - это конструкции, которые позволяют выполнять код несколько раз подряд.
• В JavaScript есть три базовых цикла: for, while и do-while.
• В этом уроке рассматриваются циклы for и while.

00:59 Цикл for

• Цикл for начинается с ключевого слова "for", за которым следует список условий.
• Внутри цикла создается переменная, которая изменяется на каждой итерации.
• В примере, переменная "i" изначально равна нулю и увеличивается на единицу на каждой итерации, пока не достигнет значения 10.
• В конце цикла, переменная "i" выводится в консоль.

06:58 Цикл while

• Цикл while также позволяет выполнить код несколько раз подряд, но условия записываются вне цикла.
• В примере, переменная "j" изначально равна нулю и увеличивается на единицу на каждой итерации, пока не достигнет значения 10.
• В конце цикла, переменная "j" выводится в консоль.

11:04 Циклы в программировании

• В видео обсуждаются различные типы циклов в программировании, включая цикл for, while и do-while.
• Объясняется, как использовать эти циклы для выполнения определенных действий.

14:42 Использование операторов в циклах

• Рассматриваются операторы break и continue, которые позволяют выйти из цикла или пропустить определенную итерацию.
• Обсуждается, как использовать эти операторы в различных циклах.

19:03 Перебор массива с помощью цикла for

• В видео демонстрируется, как использовать цикл for для перебора элементов массива и вывода их на экран.

19:32 Создание цикла для работы с массивами

• Создается цикл for, который будет работать с массивами.
• Переменная "ai" изначально имеет значение 0.
• Цикл будет продолжаться до тех пор, пока "ai" меньше количества элементов в массиве.
• Для подсчета количества элементов в массиве используется метод "len".
• Каждый раз "ai" увеличивается на 1.

20:30 Вывод элементов массива в консоль

• В цикле выводятся элементы массива в следующем формате: "элемент" + индекс элемента + значение элемента.
• Для вывода значения элемента используется обращение к массиву с индексом "ai".

22:27 Работа с элементами массива

• Последний элемент массива можно указать как число, например, 91.
• С каждым элементом можно работать, например, умножать на 2 и выводить результат.


Уроки JavaScript для начинающих / #9 – Всплывающие окна (alert, prompt, confirm)

https://youtu.be/UCSuoEJ50G8?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Всплывающие окна в JavaScript

• В этом уроке рассматриваются всплывающие окна в языке JavaScript.
• Существуют несколько методов для создания всплывающих окон, включая метод alert().
• Этот метод позволяет создать обычное всплывающее окно с информацией и кнопкой "ОК".
• Стиль к таким окнам добавить невозможно, они создаются с нуля.

alert("Какая хорошая погода!");

03:46 Метод confirm()

• Метод confirm() позволяет создать всплывающее окно с двумя кнопками: "Отмена" и "ОК".
• Стили для таких окон могут меняться в зависимости от браузера.
• Можно получать значение, которое нажал пользователь, и использовать его для проверки.

var data = confirm("Вы согласны?");
if (data == true) {
        alert("Вы согласились");
} else {
        alert("Вы отказались");
}

05:40 Создание всплывающего окна

• Создание всплывающего окна с помощью метода "prompt".
• Указание текста для отображения пользователю и значения по умолчанию.

var data = prompt("Введите дату рождения", "01.01.1970");
console.log(data)

07:35 Работа с переменными

• Создание переменной "персон" и установка значения "нал".
• Проверка значения переменной с помощью условия и метода "конфирм".

08:32 Пример использования

• Создание условия для проверки уверенности пользователя.
• Использование методов "пропт", "арт" и "алерт" для вывода текста и имени пользователя.
• Обработка действий пользователя и вывод сообщений в зависимости от его выбора.

var person = null;
if (confirm('Вы точно уверены?')) {
person = prompt('Введите ваше имя');
alert('Привет ' + person);
} else {
alert('Вы нажали "Отмена"');
}


Уроки JavaScript для начинающих / #10 – Функции в языке JavaScript

https://youtu.be/yUTwuyfTsOc?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Создание функции в JavaScript

• Видео начинается с объяснения того, что функции можно рассматривать как небольшие подпрограммы, которые содержат повторяющийся код.
• Функции позволяют сократить код и вынести повторяющийся код в отдельное место, где его можно легко вызвать.
• Функции иногда называют методами, методы - это те функции, которые принадлежат объектам.

02:42 Создание функции "info"

• Создается функция "info", которая выводит информацию на экран.
• Функция вызывается с помощью обращения к ее имени и круглых скобок.

function info() {
    console.log("Первая строка в консоли");
    console.log("Вторая строка в консоли");
}

info();

05:58 Передача параметров в функцию

• Функции могут принимать параметры, которые указываются в круглых скобках после имени функции.
• Параметры могут быть любого типа, но в данном примере используется строка.

function info(word) {
    console.log(word + "!");
}

info("Hello");

07:52 Создание функции для сложения чисел

• Создается функция "summa", которая принимает два параметра "a" и "b".
• Внутри функции создается переменная "var res" и в нее помещается сложение чисел.
• Функция вызывается с параметрами 5 и 7, и в терминале выводится результат 12.

function summa(a, b) {
    var res = a + b;
    console.log(res);
}

summa (5, 7);

09:48 Вызов другой функции внутри функции

• Внутри функции "summa" вызывается функция "info", которая принимает параметр "word".
• Внутри функции "info" вызывается переменная "res", которая была создана в функции "summa".
• Результат сложения чисел выводится в консоль и к нему добавляется восклицательный знак.

function info(word) {
    console.log(word + "!");
}

function summa(a, b) {
    var res = a + b;
    info(res);
}

summa (5, 7);

11:43 Создание функции для подсчета суммы элементов массива

• Создается функция "summa", которая принимает массив "arr".
• Внутри функции создается переменная "sum" и к ее значению добавляется значение каждого элемента массива.
• Функция вызывается с разными массивами, и каждый раз обрабатывается корректно.

function summa(arr) {
    var sum = 0;

    for(var i = 0; i < arr.length; i++)
        sum += arr[i];

    console.log(sum);
}

var array = [6, 8, 1];
var array_2 = [6, 8, 1, 7];
var array_3 = [6, 8, 1, 90];

summa(array);
summa(array_2);
summa(array_3);


14:15 Возвращение значений из функции

• Внутри функции "summa" используется ключевое слово "return", чтобы вернуть значение переменной "sum".
• Результат функции помещается в переменную "res" и выводится в консоль.

function summa(arr) {
    var sum = 0;

    for(var i = 0; i < arr.length; i++)
        sum += arr[i];

    return sum;
}

var array = [6, 8, 1];

var res = summa(array);
console.log("Результат " + res)

16:10 Локальные и глобальные переменные

• В функции "summa" можно использовать "return", чтобы вернуть результат и сохранить его в переменной.
• В других частях программы можно использовать локальные и глобальные переменные для хранения и работы с данными.

17:00 Локальные и глобальные переменные

• Локальная переменная - это та, которая записана внутри функции и видна только внутри этой функции.
• Глобальная переменная - это та, которая записана вне функции и видна везде.

18:52 Создание и использование переменных

• Если создать переменную внутри функции, она будет локальной и видна только внутри этой функции.
• Если создать переменную вне функции, она будет глобальной и видна везде.
• Можно создать глобальную переменную с названием "num" и локальную переменную с тем же названием, они не будут пересекаться. В консоли отобразятся оба значения переменных.

var num = 10;

function info() {
    var num = 20;
    console.log(num);
}

info();

console.log(num);


Уроки JavaScript для начинающих / #11 – События и обработчик событий в JavaScript

https://youtu.be/Tw-_axj7Jis?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Создание обработчика событий

• В языке JavaScript можно отслеживать события, которые делает пользователь, используя различные HTML-атрибуты.
• В этом уроке рассматривается первый способ, где при нажатии на кнопку вызывается функция, которая выводит сообщение.

05:51 Атрибуты событий

• В HTML существуют различные атрибуты, которые вызывают события при определенных действиях пользователя.
• Примеры атрибутов: 
onclick - совершает действие при нажатии пользователем на элемент или объект
ondblclick - действие при двойном нажатии 
onmouseover - действие при наведении мышкой
onmouseout - действие при отведении мыши (противоположное действие onmouseover) 
и так далее, атрибуов много, есть взаимозаменяемые, или очень редко используемые.
• В файле index.html, в блоке <body> нужно добавить кнопку с атрибутом onclick, действие которого будет вызывать alert, чтобы по нажатии всплывало уведомление:

<button onclick="alert('Вы нажали на меня!')">Нажми на меня!</button>

• Такой способ удобен только тогда, когда в html запись нужно добавить небольшой фрагмент JavaScript кода. В противном случае вместо кода вызывается функция, внутри которой обрабатываются все нужные действия. Функция может называться как угодно (в данном случае onClickButton()), и для того чтобы она выполнялась, в конце названия нужно добавлять круглые скобки. 

<button onclick="onClickButton()">Нажми на меня!</button>

Сам код функции может находиться рядом с index.html в JavaScript файле - main.js в данном случае. Чтобы добиться действия, аналогично тому, что было в прошлом примере, в файл main.js нужно добавить код:

function onClickButton() {
    alert('Вы нажали на меня!')
}

09:44 Подсчет количества нажатий на кнопку

• Для подсчета количества нажатий на кнопку создается глобальная переменная, которая увеличивается на единицу при каждом нажатии.
• Вывод количества нажатий осуществляется в консоль.

var counter = 0;

function onClickButton() {
    counter++;
    console.log(counter)
}

11:39 Создание интерактивности на сайте (число нажатий на кнопку выводится на саму кнопку)

• Создание глобальной переменной для хранения значения.
• Добавление единицы к значению переменной при каждом нажатии на кнопку.
• Использование ключевого слова "this" для передачи объекта в функцию.

<button onclick="onClickButton(this)">Нажми на меня!</button>

This в данном контексте обозначает то, что в функцию передается button 
• Установка текста "вы нажали на кнопку" внутри функции.

var counter = 0;

function onClickButton(el) {
    counter++;
    el.innerHTML = "Вы нажали на кнопку: " + counter;
}

14:27 Работа с атрибутами и событиями

• Обращение к атрибутам объекта через точку.
• Установка значения атрибута "name" внутри функции.
• Обращение к другим атрибутам объекта, таким как "onclick".
• Обращение к свойству "value" для атрибута "onclick".

<button name="mainButton" onclick="onClickButton(this)">Нажми на меня!</button>

function onClickButton(el) {
    counter++;
    el.innerHTML = "Вы нажали на кнопку: " + counter;
	
	console.log(el.name);
	console.log(el.onclick);
}

16:21 Работа с текстовыми полями

• Использование функции "oninput" для отслеживания ввода текста в текстовое поле. Добавление в <body>

<input oninput="onInput(this)">

• Установка всплывающего окна при вводе определенного слова. Добавление еще одной функции в main.js:

function onInput(el) {
    if(el.value == "Hello")
        alert("И тебе привет!");
    console.log(el.value);

20:12 Работа со стилями

• Обращение к свойству "style" для установки стилей для объекта.
• Установка заднего фона кнопки на красный цвет при нажатии.
• Установка цвета текста на синий.
• Установка дополнительных стилей через свойство "cssText". При использовании cssText, другие свойства стилей аннулируются.

function onClickButton(el) {
    counter++;
    el.innerHTML = "Вы нажали на кнопку: " + counter;
    el.style.background = "red";
    el.style.color = "blue";

    el.style.cssText = "border-radius: 5px; border: 0px; font-size: 20px";
	
	
Уроки JavaScript для начинающих / #12 – Управление HTML и обработка форм при помощи JS

https://youtu.be/1nzH6WCEonQ?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Выбор HTML-тегов с помощью JavaScript

• Создание HTML-тэга абзаца с уникальным идентификатором.
<p id="text">Text</p>
• Выбор HTML-объекта с помощью переменной и функции getElementById.
var text = document.getElementById('text');

04:46 Работа с атрибутами и стилями

• Обращение к атрибутам и стилям объекта через точку.
text.title = "New test";
console.log(text.title);
• Изменение цвета текста и фона с помощью свойств color и backgroundColor.
text.style.color = "red";
text.style.backgroundColor = "blue";

08:41 Запись информации в HTML-объект

• Использование свойства innerHTML для записи текста и HTML-кода внутрь объекта.
text.innerHTML = "New<br>string";
• Работа с одним свойством объекта без создания переменной.
document.getElementById('text').style.color = "white";

10:33 Выбор объектов по названию тэга

• Создание функции для выбора объектов по названию тэга.
var spans = document.getElementsByTagName('span');
• Создание массива объектов с тэгами "span" в body, в index.html.
<span>Text 1</span>
<span>Text 2</span>
<span>Text 3</span>
• Вывод содержимого тэгов в консоль.
for(var i = 0; i < spans.length; i++) {
    console.log(spans[i].innerHTML);
}

14:27 Выбор объектов по названию класса

    <span class="simple-text">Text 1</span>
    <span class="simple-text">Text 2</span>
    <span class="simple-text">Text 3</span>
• Создание функции для выбора объектов по названию класса.
var spans = document.getElementsByClassName('simple-text');
• Вывод содержимого тэгов в консоль.
for(var i = 0; i < spans.length; i++) {
    console.log(spans[i].innerHTML);
}

17:19 Создание формы и проверка данных

• Создание формы с полями для ввода имени, пароля, пола и кнопки.
<form id="main-form" onsubmit="this" method="post">
        <label for="name">Имя:</label>
        <input type="text" name="name" placeholder="Имя" id="name"><br><br>
        <label for="password">Пароль:</label>
        <input type="password" name="pass" placeholder="Пароль" id="pass"><br><br>
        <label for="repass">Проверка пароля:</label>
        <input type="password" name="repass" placeholder="Проверка пароля" id="repass">
        <span>Пол:</span>
        <input type="radio" name="state" id="male" value="Мужской">
        <label for="male">Мужской</label>
        <input type="radio" name="state" id="female" value="Женский">
        <label for="female">Женский</label><br><br>
        <input type="submit" name="submit" value="Готово">
    </form>
• Создание функции для проверки данных при нажатии на кнопку.
<input type="submit" name="submit" value="Готово">
• Передача объекта формы в функцию для обработки данных.
(onsubmit="return checkForm(this)" в теге form)

21:18 Получение данных из формы

• Автор объясняет, как получить данные из формы, используя метод передачи данных "post".
method="post" в теге form и параметр el (element), который, по сути и является формой.
• Он также исправляет ошибку, когда текст появляется и исчезает при нажатии на кнопку "готово".
Для обработчика событий onsubmit возвращается return значение функции checkForm(this)

function checkForm(el) {

    console.log("text");

    return false;
}

28:01 Проверка данных

• Автор добавляет проверки для различных условий, таких как пустые поля, некорректные имена, пароли, которые не совпадают, и символы в пароле.

  // Один из способов получения данных
    //var name = document.getElementById('name').value;

    var name = el.name.value;
    var pass = el.pass.value;
    var repass = el.repass.value;
    var state = el.state.value;

    var fail = "";
    if(name == "" || pass == "" || state == "")
        fail = "Заполните все поля";
    else if(name.length <= 1 || name.length > 50)
        fail = "Введите корректное имя";
    else if(pass != repass)
        fail = "Пароли должны совподать";

• Он также добавляет проверку на наличие амперсанта в пароле.

    else if(pass.split("&").length > 1)
        fail = "Некорректный пароль";

    if (fail != "") {
        document.getElementById('error').innerHTML = fail;

        return false;
    } else {
        alert("Данные корректно заполнены");

        return true
    }
}


31:56 Проверка формы

• В видео обсуждается проверка формы на наличие ошибок и их отображение на странице.
• Если в форме есть ошибки, то они выводятся в виде всплывающего окна с сообщением об ошибке.
• Если ошибок нет, то возвращается значение true.

37:40 Отслеживание событий

• В видео объясняется, как отслеживать события формы с помощью JavaScript.
• Для этого используется метод "addEventListener", который позволяет повесить обработчик на событие "submit". Это важный момент, т.к. отделять html код от js кода является хорошим тоном.
Нужно привести тэг <form id="main-form" onsubmit="return checkForm(this)" method="post"> к виду:
<form id="main-form" method="post">; 
в файле main.js в самое начало добавить:
document.getElementById('main-form').addEventListener("submit", checkForm).
Также нужно привести функцию function checkForm(el) к виду:
function checkForm(event) {
    event.preventDefault();
    var el = document.getElementById('main-form'); 
• В обработчике события можно проверить, есть ли ошибки в форме, и если есть, то вывести соответствующее сообщение.


Уроки JavaScript для начинающих / #13 – Создание таймеров и интервалов

https://youtu.be/M_4ePNcric0?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:00 Интервалы и таймеры в JavaScript

• В этом уроке мы изучим, как работать с интервалами и таймерами в языке JavaScript.
• Интервалы позволяют выполнять код через определенные промежутки времени, а таймеры - один раз.

01:00 Создание интервала

• Для создания интервала используется функция setInterval, которая принимает два параметра: название функции или саму функцию и количество миллисекунд.
setInterval(my_func, 1000);
• Пример: создание функции "my_func", которая выводит значение переменной "counter" каждую секунду.
var counter = 0;
function my_func() {
    counter++;
    console.log("counter" + counter);
• В случае, когда setInterval принимает не название, а саму функцию, код выглядит следующим образом:
var counter = 0;
setInterval(function() {
    counter++;
    console.log("Прошло секунд: " + counter);
}, 1000)

04:52 Остановка интервала

• Интервал можно остановить, поместив его в переменную и вызвав метод clearInterval в функции.
var counter = 0;

id = setInterval (my_func, 1000); 

function my_func() {
    counter++;
    console.log("counter" + counter);

    if (counter == 3)
        clearInterval(id);
}

05:46 Создание таймера

• Для создания таймера используется функция setTimeout, которая также принимает два параметра: название функции или саму функцию и количество миллисекунд.
• Пример: создание функции "Timeout is working", которая срабатывает через две секунды.
setTimeout(function() {
    console.log("Timeout is working!");
}, 2000);

или:
setTimeout(my_func, 2000);

function my_func() {
    console.log("Timeout is working!");
}


Уроки JavaScript для начинающих / #14 – Создание объектов. Встроенные функции

https://youtu.be/jtw15FBCETE?list=PLDyJYA6aTY1kJIwbYHzGOuvSMNTfqksmk

00:53 Работа с датой в JavaScript

• Создание объекта на основе класса Date.
var date = new Date();
• Методы для работы с датой: getFullYear, getMonth, getHours, getMinutes, getSeconds, getMilliseconds.
console.log(date.getFullYear());
console.log(date.getMonth() + 1);
console.log(date.getHours());
console.log(date.getMinutes());
• Установка собственной даты с помощью методов set и set.
date.setHours(23);
date.setMinutes(23);
console.log("Время: " + date.getHours() + ":" + date.getMinutes());

06:35 Работа с массивами в JavaScript

• Методы для работы с массивами: length, join, sort, reverse.
var arr = [8, 9, 5, 7, 0, 8, 90];
console.log(arr.sort());
console.log(arr.reverse().join(" ,"));
• Разбиение строки на массив с помощью метода split.
var arr = [8, 9, 5, 7, 0, 8, 90, 42];
var stroka = arr.reverse().join(", ");
console.log(stroka.split(", "));

10:29 Создание классов и объектов

• В видео объясняется, что классы и объекты используются для описания и создания различных предметов в жизни.
• Внутри класса можно создать переменные, описывающие предмет, и функции, такие как открытие или уничтожение.
• На основе класса можно создать множество объектов с собственными значениями.

12:26 Создание объекта на основе класса

• Для создания объекта на основе класса используется ключевое слово "class".
• Внутри класса создается конструктор, который устанавливает параметры объекта.
• Созданный объект может быть выведен на экран для отображения его характеристик.

class Person {
    constructor(name, age, happynes) {
        this.name = name;
        this.age = age;
        this.happynes = happynes;
    }
}

var alex = new Person('Alex', 45, true);
console.log(alex.age);

14:17 Работа с объектами и классами

• Объекты могут быть созданы на основе одного класса, и все их характеристики хранятся внутри класса.
• Объекты могут быть созданы в любом количестве, и каждый объект имеет свои собственные значения.
• Объекты могут быть выведены на экран для отображения их характеристик.
• Объекты могут иметь функции, которые доступны каждому объекту.

class Person {
    constructor(name, age, happynes) {
        this.name = name;
        this.age = age;
        this.happynes = happynes;
    }

    info() {
        console.log("Человек: " + this.name + ", Возраст: " + this.age + ", Состояние удовлетворенности: " + this.happynes);
    }
}

var alex = new Person('Alex', 45, true);
var bob = new Person('Bob', 25, false);

bob.happynes = true

alex.info();
bob.info();

console.log(alex.happynes);
console.log(bob.happynes);


